{"version":3,"sources":["redux/contacts/actions.js","redux/contacts/selectors.js","components/ContactForm/ContactForm.js","components/Filter/Filter.js","components/ContactList/ContactList.js","components/ContactItem/ContactItem.js","App.js","redux/contacts/reducers.js","redux/store.js","index.js"],"names":["addContact","createAction","deleteContact","filterValue","getContacts","state","contacts","getFilter","filter","getFilteredContacts","normalizedFilter","toLowerCase","contact","name","includes","ContactForm","useSelector","dispatch","useDispatch","useState","setName","number","setNumber","nameId","shortid","numberId","resetForm","className","onSubmit","e","preventDefault","contactObj","id","map","alert","htmlFor","type","value","onChange","target","pattern","title","required","Filter","ContactList","children","ContactItem","onClick","App","filterId","handleChangeFilter","contactsList","createReducer","payload","contactFilter","_","persistConfig","key","version","storage","blacklist","contactsReducer","combineReducers","persistedReducer","persistReducer","store","configureStore","reducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","persistor","persistStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bd6607e9.chunk.js","sourcesContent":["import { createAction } from '@reduxjs/toolkit'\r\n\r\n// export const addContact = (contact) => ({\r\n//   type: 'contact/add',\r\n//   payload: contact,\r\n// })\r\n\r\n// export const deleteProduct = (id) => ({\r\n//   type: 'product/delete',\r\n//   payload: { id },\r\n// })\r\n\r\n// export const filterValue = (value) => ({\r\n//   type: 'filter/value',\r\n//   payload: value,\r\n// })\r\n\r\nexport const addContact = createAction('contact/add')\r\nexport const deleteContact = createAction('contact/delete')\r\nexport const filterValue = createAction('filter/value')\r\n","export const getContacts = (state) => state.contacts\r\nexport const getFilter = (state) => state.filter\r\n\r\nexport const getFilteredContacts = (state) => {\r\n  const contacts = getContacts(state)\r\n  const filter = getFilter(state)\r\n  const normalizedFilter = filter.toLowerCase()\r\n  return contacts.filter((contact) =>\r\n    contact.name.toLowerCase().includes(normalizedFilter)\r\n  )\r\n}\r\n","// import { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport shortid from 'shortid'\nimport './ContactForm.css'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { addContact } from '../../redux/contacts/actions'\nimport { useState } from 'react'\nimport { getContacts } from '../../redux/contacts/selectors'\n\nconst ContactForm = () => {\n  // state = {\n  //   name: '',\n  //   number: '',\n  // }\n  const contacts = useSelector(getContacts)\n  const dispatch = useDispatch()\n\n  const [name, setName] = useState('')\n  const [number, setNumber] = useState('')\n\n  const nameId = shortid()\n  const numberId = shortid()\n\n  const handleChangeName = (e) => {\n    // this.setState({\n    //   name: e.target.value,\n    // })\n    setName(e.target.value)\n  }\n\n  const handleChangeNumber = (e) => {\n    // this.setState({\n    //   number: e.target.value,\n    // })\n    setNumber(e.target.value)\n  }\n\n  const addNewContact = (contact) => dispatch(addContact(contact))\n\n  const handleSubmit = (e) => {\n    e.preventDefault()\n\n    const contactObj = {\n      id: shortid(),\n      name,\n      number,\n    }\n\n    // const banOnAddingDuplicateContact = (value) => {\n    //   contacts.map((contact) => contact.name).includes(value.name)\n    //     ? alert(`${value.name} is already in contacts`)\n    //     : addNewContact(value)\n    // }\n\n    if (contacts.map((contact) => contact.name).includes(name)) {\n      alert(`${name} is already in contacts`)\n    } else {\n      addNewContact(contactObj)\n    }\n\n    // banOnAddingDuplicateContact(contact)\n    resetForm()\n  }\n\n  const resetForm = () => {\n    // this.setState({ name: '', number: '' })\n    setName('')\n    setNumber('')\n  }\n\n  return (\n    <form className='contact-form' onSubmit={handleSubmit}>\n      <label className='label' htmlFor={nameId}>\n        Enter name\n      </label>\n      <input\n        id={nameId}\n        type='text'\n        className='input'\n        name='name'\n        value={name}\n        onChange={handleChangeName}\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n        required\n      />\n      <label className='label' htmlFor={numberId}>\n        Enter number\n      </label>\n      <input\n        id={numberId}\n        type='tel'\n        className='input'\n        name='number'\n        value={number}\n        onChange={handleChangeNumber}\n        pattern='\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}'\n        title='Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +'\n        required\n      />\n      <button type='submit' className='contact-button'>\n        Add contact\n      </button>\n    </form>\n  )\n}\n\n// const mapDispatchToProps = (dispatch) => {\n//   return {\n//     onAdd: (contact) => dispatch(addContact(contact)),\n//   }\n// }\n\nContactForm.propTypes = {\n  banOnAddingDuplicateContact: PropTypes.func,\n}\n\n// export default connect(null, mapDispatchToProps)(ContactForm)\nexport default ContactForm\n","import PropTypes from 'prop-types'\nimport { useSelector, useDispatch } from 'react-redux'\nimport './Filter.css'\nimport { getFilter } from '../../redux/contacts/selectors'\nimport { filterValue } from '../../redux/contacts/actions'\n\nconst Filter = () => {\n  const value = useSelector(getFilter)\n  const dispatch = useDispatch()\n  return (\n    <div className='filter-container'>\n      <label className='label' htmlFor='filter'>\n        Find contacts by name\n      </label>\n      <input\n        className='input'\n        id='filter'\n        type='text'\n        name='filter'\n        value={value}\n        onChange={(e) => dispatch(filterValue(e.target.value))}\n      />\n    </div>\n  )\n}\n\nFilter.propTypes = {\n  filterId: PropTypes.string,\n  handleChangeFilter: PropTypes.func,\n}\n\nexport default Filter\n","import './ContactList.css'\n\nconst ContactList = ({ children }) => {\n    return (\n        <ul className=\"contact-list\">\n            {children}\n        </ul>\n    )\n}\n\nexport default ContactList","// import PropTypes from 'prop-types'\nimport './ContactItem.css'\n// import { connect } from 'react-redux'\nimport { deleteContact } from '../../redux/contacts/actions'\nimport { getFilteredContacts } from '../../redux/contacts/selectors'\nimport { useSelector, useDispatch } from 'react-redux'\n\nconst ContactItem = () => {\n  const contacts = useSelector(getFilteredContacts)\n  const dispatch = useDispatch()\n\n  // const onDelete = (id) => dispatch(deleteContact(id))\n  return (\n    <>\n      {contacts.map(({ id, name, number }) => (\n        <li key={id}>\n          {name}: {number}\n          <button\n            type='button'\n            className='delete-button'\n            onClick={() => dispatch(deleteContact(id))}\n          >\n            Delete\n          </button>\n        </li>\n      ))}\n    </>\n  )\n}\n\n// ContactItem.propTypes = {\n//   filter: PropTypes.string,\n//   contacts: PropTypes.array,\n//   deleteContact: PropTypes.func,\n// }\n\n// const mapStateToProps = (state) => {\n//   return {\n//     contacts: state.contacts,\n//   }\n// }\n\n// const mapDispatchToProps = (dispatch) => {\n//   return {\n//     onDelete: (id) => dispatch(deleteContact(id)),\n//   }\n// }\n\nexport default ContactItem\n// export default connect(mapStateToProps, mapDispatchToProps)(ContactItem)\n","// import { Component } from 'react'\nimport { useState, useEffect } from 'react'\nimport shortid from 'shortid'\nimport ContactForm from './components/ContactForm/ContactForm'\nimport Filter from './components/Filter/Filter'\nimport ContactList from './components/ContactList/ContactList'\nimport ContactItem from './components/ContactItem/ContactItem'\nimport './App.css'\nimport { useDispatch } from 'react-redux'\nimport { filterValue } from './redux/contacts/actions'\n\nconst App = () => {\n  // state = {\n  //   contacts: [],\n  //   filter: '',\n  // }\n\n  // const [contacts, setContacts] = useState([])\n  // const [filter, setFilter] = useState('')\n\n  const filterId = shortid()\n  const dispatch = useDispatch()\n\n  // componentDidMount() {\n  //   const parsedContacts = JSON.parse(localStorage.getItem('contacts'))\n  //   if (parsedContacts) {\n  //     this.setState({ contacts: parsedContacts })\n  //   }\n  // }\n\n  // componentDidUpdate(prevState) {\n  //   if (prevState.contacts !== this.state.contacts) {\n  //     localStorage.setItem('contacts', JSON.stringify(this.state.contacts))\n  //   }\n  // }\n\n  // const addNewContact = (contact) => {\n  //   // this.setState((prevState) => {\n  //   //   return {\n  //   //     contacts: [...prevState.contacts, contact],\n  //   //   }\n  //   // })\n\n  //   setContacts((prev) => [...prev, contact])\n  // }\n\n  // const banOnAddingDuplicateContact = (value) => {\n  //   contacts.map((contact) => contact.name).includes(value.name)\n  //     ? alert(`${value.name} is already in contacts`)\n  //     : addNewContact(value)\n  // }\n\n  const handleChangeFilter = (e) => {\n    // this.setState({\n    //   filter: e.target.value,\n    // })\n    // setFilter(e.target.value)\n    dispatch(filterValue(e.target.value))\n  }\n\n  // const deleteContact = (id) => {\n  //   // this.setState((prevState) => ({\n  //   //   contacts: prevState.contacts.filter((contact) => contact.id !== id),\n  //   // }))\n\n  //   setContacts((prev) => prev.filter((contact) => contact.id !== id))\n  // }\n\n  return (\n    <div className='App'>\n      <h1>Phonebook</h1>\n\n      <ContactForm></ContactForm>\n\n      <h2>Contacts</h2>\n\n      <Filter\n        filterId={filterId}\n        handleChangeFilter={handleChangeFilter}\n      ></Filter>\n\n      <ContactList>\n        <ContactItem></ContactItem>\n      </ContactList>\n    </div>\n  )\n}\n\nexport default App\n","// import { combineReducers } from 'redux'\r\nimport { createReducer } from '@reduxjs/toolkit'\r\nimport { addContact, deleteContact, filterValue } from './actions'\r\n\r\nexport const contactsList = createReducer([], {\r\n  [addContact]: (state, { payload }) => [...state, payload],\r\n  [deleteContact]: (state, { payload }) =>\r\n    state.filter((contact) => contact.id !== payload),\r\n})\r\n\r\nexport const contactFilter = createReducer('', {\r\n  [filterValue]: (_, { payload }) => payload,\r\n})\r\n\r\n// const contactsList = (state = [], action) => {\r\n//   switch (action.type) {\r\n//     case 'contact/add':\r\n//       return [...state, action.payload]\r\n//       break\r\n//     case 'contact/delete':\r\n//       return state.filter((contact) => contact.id !== action.payload.id)\r\n//       break\r\n//     default:\r\n//       return state\r\n//   }\r\n// }\r\n","// import { createStore } from 'redux'\r\n// import { contactsReducer } from './contacts/reducers'\r\nimport { configureStore } from '@reduxjs/toolkit'\r\nimport { contactsList, contactFilter } from './contacts/reducers'\r\nimport { combineReducers } from 'redux'\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist'\r\nimport storage from 'redux-persist/lib/storage'\r\n// export const store = createStore(\r\n//   contactsReducer,\r\n//   window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n// )\r\nconst persistConfig = {\r\n  key: 'contacts',\r\n  version: 1,\r\n  storage,\r\n  blacklist: ['filter'],\r\n}\r\n\r\nconst contactsReducer = combineReducers({\r\n  contacts: contactsList,\r\n  filter: contactFilter,\r\n})\r\n\r\nconst persistedReducer = persistReducer(persistConfig, contactsReducer)\r\n\r\nexport const store = configureStore({\r\n  reducer: persistedReducer,\r\n  middleware: (getDefaultMiddleware) =>\r\n    getDefaultMiddleware({\r\n      serializableCheck: {\r\n        ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n      },\r\n    }),\r\n})\r\n\r\nexport let persistor = persistStore(store)\r\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport { Provider } from 'react-redux'\nimport { PersistGate } from 'redux-persist/integration/react'\nimport { persistor, store } from './redux/store'\nReactDOM.render(\n  <React.StrictMode>\n    <PersistGate persistor={persistor}>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </PersistGate>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}